[workspace]
members = ["wavrw", "wavrw-cli"] 
resolver = "2"

[workspace.package]
# name = "wavrw"
version = "0.2.0"
edition = "2024"
description = "WAV file metadata read/write utility"
authors = ["Brian Dorsey"]
readme = "README.md"
repository = "https://github.com/briandorsey/wavrw"
homepage = "https://github.com/briandorsey/wavrw"
license = "Apache-2.0 OR MIT"
keywords = ["parser", "metadata", "wav"]
categories = ["multimedia::encoding", "parser-implementations"]

[workspace.dependencies]
tracing = { version = "0.1.40", default-features = false, features = ["attributes"] }
itertools = "0.13"

[profile.release]
overflow-checks = true

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[workspace.lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"

missing_debug_implementations = "deny"

future_incompatible = { level = "warn", priority = -1 }
nonstandard_style = { level = "warn", priority = -1 }
rust_2018_idioms= { level = "warn", priority = -1 }
unexpected_cfgs = "warn"

# via cliffle
# avoid obfuscated lifetimes 
elided_lifetimes_in_paths = "deny"

[workspace.lints.rustdoc]
missing_crate_level_docs = "warn"

[workspace.lints.clippy]
unwrap_used = "warn"
needless_pass_by_value = "warn"

# no_std helpers
std_instead_of_core = "warn"
alloc_instead_of_core = "warn"
std_instead_of_alloc = "warn"

# compile error when new enum variants added by dependencies
wildcard_enum_match_arm = "deny"

# recommended by: https://github.com/EmbarkStudios/rust-ecosystem/blob/main/lints.toml
await_holding_lock = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_ok_or = "warn"
# map_err_ignore = "warn"   # broken on br(count = size) attributes
map_flatten = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
missing_enforced_import_renames = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
unimplemented = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
zero_sized_map_values = "warn"
